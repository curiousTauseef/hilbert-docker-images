#
# bashttpd.conf - configuration for bashttpd
#
# The behavior of bashttpd is dictated by the evaluation
# of rules specified in this configuration file.  Each rule
# is evaluated until one is matched.  If no rule is matched,
# bashttpd will serve a 500 Internal Server Error.
#
# The format of the rules are:
#    on_uri_match REGEX command [args]
#    unconditionally command [args]
#
# on_uri_match:
#   On an incoming request, the URI is checked against the specified
#   (bash-supported extended) regular expression, and if encounters a match the
#   specified command is executed with the specified arguments.
#
#   For additional flexibility, on_uri_match will also pass the results of the
#   regular expression match, ${BASH_REMATCH[@]} as additional arguments to the
#   command.
#
# unconditionally:
#   Always serve via the specified command.  Useful for catchall rules.
#
# The following commands are available for use:
#
#   serve_file FILE
#     Statically serves a single file.
#
#   serve_dir_with_tree DIRECTORY
#     Statically serves the specified directory using 'tree'.  It must be
#     installed and in the PATH.
#
#   serve_dir_with_ls DIRECTORY
#     Statically serves the specified directory using 'ls -al'.
#
#   serve_dir  DIRECTORY
#     Statically serves a single directory listing.  Will use 'tree' if it is
#     installed and in the PATH, otherwise, 'ls -al'
#
#   serve_dir_or_file_from DIRECTORY
#     Serves either a directory listing (using serve_dir) or a file (using
#     serve_file).  Constructs local path by appending the specified root
#     directory, and the URI portion of the client request.
#
#   serve_static_string STRING
#     Serves the specified static string with Content-Type text/plain.
#
# Examples of rules:
#
# on_uri_match '^/issue$' serve_file "/etc/issue"
#
#   When a client's requested URI matches the string '/issue', serve them the
#   contents of /etc/issue
#
# on_uri_match 'root' serve_dir /
#
#   When a client's requested URI has the word 'root' in it, serve up
#   a directory listing of /
#
# DOCROOT="$PWD/STATIONS"

# on_uri_match '/(.*)' serve_dir_or_file_from "$DOCROOT"
#   When any URI request is made, attempt to serve a directory listing
#   or file content based on the request URI, by mapping URI's to local
#   paths relative to the specified "$DOCROOT"
#

# on_uri_match '^/cfgs/(.*)$' serve_dir_or_file_from "$DOCROOT"
serve_dir_with_tree2()
{
   local dir="$PWD/STATIONS/" tree_vers tree_opts basehref x

   add_response_header "Content-Type" "text/html"

   # The --du option was added in 1.6.0.
   read x tree_vers x < <(tree --version)
   [[ $tree_vers == v1.6* ]] && tree_opts="--du"

   send_response_ok_exit < \
      <(tree -H "." -L 1 "$tree_opts" -D "$dir")
}



on_uri_match '^/configs$' serve_dir_with_tree2
on_uri_match '^/list$' serve_file "$PWD/STATIONS/list"

urldecode() {
  echo -e "$(sed -e 's/+/ /g' -e 's/%\(..\)/\\x\1/g')"
}

unx2dos() {
  sed -e 's/$/\r/g'
}
  
serve_cmd2() {
   add_response_header "Content-Type" "text/plain"
   cmd=`echo "$2" | urldecode`
   arg=`echo "$3" | urldecode`
   
   send_response_ok_exit < \
      <($cmd $arg 2>&1)      
}

serve_sh2() {
   cmd=`echo "$2" | urldecode`
   arg=`echo "$3" | urldecode`
   add_response_header "Content-Type" "text/plain"
   send_response_ok_exit < \
      <($PWD/$cmd.sh $arg 2>&1)
}

serve_cmd() {
   add_response_header "Content-Type" "text/plain"
   cmd=`echo "$2" | urldecode`
   send_response_ok_exit < \
      <($cmd 2>&1)
}

on_uri_match '^/cmd/([^/]+)$' \
  serve_cmd
  
on_uri_match '^/cmd/([^/]+)/(.*)$' \
  serve_cmd2

on_uri_match '^/sh/([^/]+)/(.*)$' \
  serve_sh2

print_general_actions() 
{
  cat <<'EOF'
<html>
 <body>
  <h3 id="general">General Actions:</h3>
  <ul>
   <li><a target="view_page" href="http://localhost:8080">Content of <b>STATIONS/</b></a></li>
   <li><a target="view_page" href="list">serve_file STATIONS/list</a></li>
   <li><a target="view_page" href="cmd/cat/STATIONS/list">cat STATIONS/list</a></li>
   <li><a target="view_page" href="cmd/pwd">pwd</a></li>
   <li><a target="view_page" href="cmd/ls/-la">ls -la</a></li>
   <li><a target="view_page" href="cmd/docker/ps -a">docker ps -a</a></li>
   <li><a target="view_page" href="cmd/docker-machine/ls">docker-machine ls</a></li>
   <li><a target="view_page" href="sh/init/station_id station_type docker-machine">init.sh station_id station_type docker-machine</a></li>
   <li><a target="view_page" href="sh/sync">sync configs with data storage (DP CMS)</a> </li>
   <li><a target="view_page" href="sh/forall/lastapp">Update server cache of lastapp.cfg from remote station(s)</a></li>
   <li><a target="view_page" href="sh/forall/refresh">refresh configs for all stations</a></li>
   <li><a target="view_page" href="sh/forall/start">start them all</a></li>
   <li><a target="view_page" href="sh/forall/deploy">deploy to all stations</a></li>
   <li><a target="view_page" href="sh/forall/prepare">prepare them all</a></li>
   <li><a target="view_page" href="sh/forall/default">default-start them all</a></li>
   <li><a target="view_page" href="sh/forall/finishall">finish them all</a></li>
   <li><a target="view_page" href="sh/forall/shutdown">kill them all</a></li>
  </ul>
 </body>
</html>
EOF
}

print_station_list()
{
  echo "<html><body><h3 id=\"stations\">Stations:</h3><ul>"
#   <li><a target="view_page" href="?">?</a></li>
#  LIST=$(cat STATIONS/list)
  for f in $(cat STATIONS/list | grep -v -E '^ *(#.*)? *$') ; do
    echo "<li><a target=\"view_page\" href=\"station_view/$f\">$f</a></li>"
  done
  echo "</ul></body></html>"
}

print_station_view()
{
  DIR="${PWD}"
  f="$1"
  
  unset station_id
  unset station_type
  unset current_app
  unset CFG_DIR
  unset background_services
  unset default_app
  unset possible_apps
  unset station_default_app
  unset DM
  unset WOL
  unset SSH
  unset SSH_OPTS
  unset SCP
  unset IP_ADDRESS
  unset MAC_ADDRESS
  unset description
  
  cd "STATIONS/$f/"
  
  source station.cfg
  source access.cfg
  source startup.cfg
  source descriptions
  
  if [[ -r lastapp.cfg ]]; then 
    source ./lastapp.cfg
    description="${current_app}_description"
    eval description=\$$description
  fi

  cd "${DIR}/"
  
  STATE=`./status.sh "$f"`
  RET=$?
  
  cat << EOF
  <html><body> 
   <h3 id="station_$f">${station_descr}</h3>
   <ul>
   <li> State: [${RET}]: '${STATE}' </li>
   <li> Apps and services: 
     <ul>
      <li>Current GUI App: [${current_app}]: '${description}'</li> 
      <li>Station Default FG APP: [${station_default_app}]</li>
      <li>Profile: '${station_type}' ( => FG: [${default_app}] @ {${possible_apps}} || BG: {${background_services}})</li>
     </ul>
   </li>
   <li>Access:
    <ul>
     <li>ACTUAL STATION ID: '${station_id}' (?!)</li>
     <li>ACCESS METHOD: '${DM}'</li>
     <li>SSH OPTIONS: '${SSH_OPTS}'</li>
     <li>SSH METHOD: '${SSH}'</li>
     <li>SCP METHOD: '${SCP}'</li>
     <li>IP: '${IP_ADDRESS}'; MAC: '${MAC_ADDRESS}'</li>
     <li>BOOT CMD: '${WOL}'</li>
    </ul>
   </li>
   <li><a target="view_page" href="/sh/init/$f ${station_type} ${DM}">CMS: re-initialize configs for the station '${station_id}' (profile: '${station_type}', DM: '${DM}')</a></li>
   <li><a target="view_page" href="/sh/refresh/$f">CMS: refresh initialization for station '${station_id}' (same vars.)</a></li>
   <li><a target="view_page" href="/sh/sync/$f">sync server cache for the station</a></li>
   <li><a target="view_page" href="/sh/lastapp/$f">Update server cache of lastapp.cfg from remote station</a></li>
   <li><a target="view_page" href="/sh/deploy/$f">deploy configs to the station </a></li>
   <li><a target="view_page" href="/sh/prepare/$f">prepare</a></li>
   <li><a target="view_page" href="/sh/start/$f">start/boot</a></li>
   <li><a target="view_page" href="/sh/default/$f">default</a></li>
   <li><a target="view_page" href="/sh/finishall/$f">finishall</a></li>
   <li><a target="view_page" href="/sh/reboot/$f">reboot</a></li>
   <li><a target="view_page" href="/sh/poweroff/$f">poweroff</a></li>
   <li><a target="view_page" href="/sh/shutdown/$f">shutdown</a></li>
   <li><a target="view_page" href="/sh/docker/$f ps -a">docker ps -a</a></li>
   <li><a target="view_page" href="/cmd/ping/-c 10 ${IP_ADDRESS}">ping -c 10 ${IP_ADDRESS}</a></li>
   <li><a target="view_page" href="/sh/remote/$f sh -c 'hostname -f; exit 0'">remote.sh $f 'hostname -f; exit 0'</a></li>
   <li><a target="view_page" href="/sh/docker/$f images -a">docker images -a</a></li>
   <li><a target="view_page" href="/sh/luncher/$f ps">luncher ps</a></li>
   <li> Switch foreground application locally to: 
     <ul>
EOF
  for a in ${possible_apps} ; do
    echo "<li><a target=\"view_page\" href=\"/sh/topswitch_update/$f $a\">topswitch '$a' + update </a></li>"
  done

  echo "</ul><form action=\"/topswitch/$f\"><select name=\"app\">"
  for a in ${possible_apps} ; do
    echo "<option value=\"$a\">$a</option>"
  done
  echo "</select><input type=\"submit\"></form>"

  if [[ "${DM}" = "docker-machine" ]]; then
  
  cat << EOF
   <li> Docker-Machine related:  <ul>
   <li><a target="view_page" href="/cmd/docker-machine/status $f">docker-machine status $f</a></li>
   <li><a target="view_page" href="/cmd/docker-machine/start $f">docker-machine start $f</a></li>
   <li><a target="view_page" href="/cmd/docker-machine/restart $f">docker-machine restart $f</a></li>
   <li><a target="view_page" href="/cmd/docker-machine/stop $f">docker-machine stop $f</a></li>
   <li><a target="view_page" href="/cmd/docker-machine/upgrade $f">docker-machine upgrade $f</a></li>
   <li><a target="view_page" href="/cmd/docker-machine/regenerate-certs $f -f">docker-machine regenerate-certs $f -f</a></li>
   </ul></li>
EOF
  fi  

  echo "</ul></body></html>"

  unset station_id
  unset station_type
  unset CFG_DIR
  unset background_services
  unset default_app
  unset possible_apps
  unset DM
  unset WOL
  unset SSH
  unset SCP
  unset IP_ADDRESS
  unset MAC_ADDRESS
}


serve_general_actions() 
{
   add_response_header "Content-Type" "text/html"
   send_response_ok_exit < \
     <(print_general_actions)

}
serve_station_list()
{
   add_response_header "Content-Type" "text/html"
   send_response_ok_exit < \
     <(print_station_list)
}

on_uri_match '^/general_actions$' serve_general_actions
on_uri_match '^/station_list$' serve_station_list

serve_station_view() {
   f=`echo "$2" | urldecode`
   add_response_header "Content-Type" "text/html"
   send_response_ok_exit < \
     <(print_station_view "$f")
}

on_uri_match '^/station_view/(.+)$' serve_station_view


serve_topswitch() {
   station=`echo "$2" | urldecode`
   app=`echo "$3" | urldecode`

   add_response_header "Content-Type" "text/plain"
   send_response_ok_exit < \
      <($PWD/topswitch_update.sh "$station" "$app" 2>&1)

### add_response_header "Content-Type" "text/html"
#   send_response_ok_exit < \
#     <(print_topswitch  $station $app)
}


on_uri_match '^/topswitch/(.*)[\?]app=(.+)$' serve_topswitch


print_dashboard() {
#  echo "<html>"
  
  cat <<'EOF'
<html>  
 <frameset cols="28%,*">
  <frameset rows="50%,*">
   <frame src="general_actions" name="general_actions_page" />
   <frame src="station_list" name="station_list_page" />
  </frameset>   
  <frame src="cmd/docker-machine/ls" name="view_page" />
  <noframes><body>Your browser does not support frames :( </body></noframes>
 </frameset>
</html>
EOF

#   echo "<h1>Tree of local config files</h1><br><pre>"
#   tree STATIONS/ | unx2dos
#   echo "</pre></body></html>"
# <hr><pre>...</pre>   

}

serve_dashboard() {
   add_response_header "Content-Type" "text/html"
   send_response_ok_exit < \
     <(print_dashboard)
}

#
# Like mentioned before, the contents of ${BASH_REMATCH[@]} are passed
# to your command, so its possible to use regular expression groups
# to pull out info.
#
# With this example, when the requested URI is /say_hello_to/Josh, serve_hello
# is invoked with the arguments '/say_hello_to/Josh' 'Josh',
# (${BASH_REMATCH[0]} is always the full match)

on_uri_match '^/dashboard$' \
  serve_dashboard

unconditionally \
   serve_file "$PWD/bashttpd.conf"
#  serve_dashboard
#  serve_static_string 'Hello, world!  You can configure bashttpd by modifying bashttpd.conf.'


# More about commands:
#
# It is possible to somewhat easily write your own commands.  An example
# may help.  The following example will serve "Hello, $x!" whenever
# a client sends a request with the URI /say_hello_to/$x:
#

serve_hello() {
   add_response_header "Content-Type" "text/plain"
   send_response_ok_exit <<< "Hello, [$2] / [$@]!"
}

serve_hello2() {
   add_response_header "Content-Type" "text/plain"
   send_response_ok_exit <<< "Hello, [$2] [$3] / [$@]!"
}

on_uri_match '^/hu/(.*)$' \
  serve_hello
  
on_uri_match '^/huhu/([^/]*)/(.*)$' \
  serve_hello2

