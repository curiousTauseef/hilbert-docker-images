#! @file access.cfg

if [ -z "${station_id}" ]; then

  echo "Warning: missing station ID... assuming local host, auto-detecting local ethernet networking settings... "
  export station_id="${station_id:-`LANG=C hostname -f`}"
  
  export NET_IF=`LANG=C netstat -rn | awk '/^0.0.0.0/ {thif=substr($0,74,10); print thif;} /^default.*UG/ {thif=substr($0,65,10); print thif;}'`
  
  # IP6?
  if [ -z "${IP_ADDRESS}" ]; then
    export IP_ADDRESS=`LANG=C ifconfig ${NET_IF} | grep -Eio 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'`
  fi

  if [ -z "${MAC_ADDRESS}" ]; then
    export MAC_ADDRESS=`LANG=C ifconfig ${NET_IF} | grep -Eio 'ether (addr:)? *([0-9a-f]{2}:){5}[0-9a-f]{2}' | grep -Eo '([0-9a-f]{2}:){5}[0-9a-f]{2}'`
  fi
  
else
  # remote via DNS name (station_id) or docker-machine name

  if [ ! "x${DM}" = "xdocker-machine" ]; then 
  
    if [ -z "${IP_ADDRESS}" ]; then 
      # 
      LANG=C ping -c3 -t1 "${station_id}" &> /dev/null
      RET="$?"

      if [ "${RET}" = 68 ]; then 
        echo "ERROR: no station with such host name: '${station_id}'!"
      else
#      [ "${RET}" = 0 ] && echo "host reachable"
#      [ "${RET}" = 2 ] && echo "host unreachable"

       if [ -z "${IP_ADDRESS}" ]; then
         export IP_ADDRESS=`LANG=C ping -c1 -t1 "${station_id}" | grep PING | grep -Eo '[\(]([0-9]+\.){3}[0-9]+[\)]' | sed -e 's@[\(\)]@@g'` 
       fi

       if [ -z "${MAC_ADDRESS}" ]; then
         export MAC_ADDRESS=`LANG=C arp "${IP_ADDRESS}" | grep -Eo '([0-9a-f]{2}:){5}[0-9a-f]{2}'`
       fi
      fi
    fi
  else  ## Virtual Station via docker-machine?
      # IP & SSH access data can change after VM restart!

      if hash "${DM}" 2>/dev/null; then

        if [ `${DM} status "${station_id}"` = "Stopped"  ]; then
          : echo "Warning: note that VM '${station_id}' is not running!"
        else
          # NOTE: real VM's IP address!!!
          export IP_ADDRESS=`${DM} ip "${station_id}"`

          export SSH_USER=$(${DM} inspect "${station_id}" --format={{.Driver.SSHUser}})
          export SSH_KEY=$(${DM} inspect "${station_id}" --format={{.Driver.SSHKeyPath}})
          export SSH_PORT=22
          # $(${DM} inspect "${station_id}" --format={{.Driver.SSHPort}})
        fi 
#      else
#        echo "Warning: Sorry no '${DM}' was found!"
      fi
  fi
  
fi # station_id != ""

#if [ ! "x${DM}" = "xdocker-machine" ]; then
#   [ -z "${IP_ADDRESS}" ] && (echo "WARNING: missing IP address for '${station_id}'...")
#   [ -z "${MAC_ADDRESS}" ] && (echo "NOTE: missing MAC address for '${station_id}'...")
#fi


if [ ! -z "${station_id}" ]; then

  if [ -z "${DM}" ]; then  
  
#    [ -z "${SSH}" ] && export SSH="${DM} ssh"
#    [ -z "${SCP}" ] && export SCP="${DM} scp"
#  else

### NOTE: the following are assumed setttings. 
### TODO: try & parse ssh -v -v -v "${station_id}" or ~/.ssh/config? 

    [ -z "${SSH_USER}" ] && export SSH_USER=$(whoami)
    [ -z "${SSH_KEY}" ]  && export SSH_KEY="${HOME}/.ssh/id_rsa"
    [ -z "${SSH_PORT}" ] && export SSH_PORT=22

#    [ -z "${SSH}" ] && export SSH="ssh"
#    [ -z "${SCP}" ] && export SCP="scp"
  fi    
  
else
  echo "ERROR: missing station ID! Cannot do SSH / SCP..!"
fi

## [ -z "${SSH_OPTS}" ] && 
#export SSH_OPTS=\
#"-F /dev/null -o ForwardX11=no -o StrictHostKeyChecking=no -o BatchMode=yes -o PasswordAuthentication=no -o UserKnownHostsFile=/dev/null -o LogLevel=quiet -o ConnectionAttempts=3 -o ConnectTimeout=10 -o ControlMaster=no -o ControlPath=none -o IdentitiesOnly=yes -o Compression=yes -o User=${SSH_USER} -o IdentityFile=${SSH_KEY} -o HostName=${IP_ADDRESS} -o Port=${SSH_PORT}"

export SSH_OPTS="\
-o ForwardX11=no -o StrictHostKeyChecking=no -o BatchMode=yes -o PasswordAuthentication=no -o UserKnownHostsFile=/dev/null \
-o LogLevel=quiet -o ConnectionAttempts=3 -o ConnectTimeout=10 -o ControlMaster=no -o ControlPath=none -o IdentitiesOnly=yes \
-o Compression=yes \
-o User=${SSH_USER} -o IdentityFile=${SSH_KEY} -o HostName=${IP_ADDRESS} -o Port=${SSH_PORT}"

export SSH="ssh -a -F /dev/null ${SSH_OPTS}"
export SCP="scp -F /dev/null ${SSH_OPTS}"
